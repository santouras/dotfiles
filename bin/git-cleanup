#!/bin/bash

# -m Removes local branches that have been merged into the current branch
# -b Rebases against where current branch diverged from master
# -r Cleanups all remotes
# -x Rebases against origin/master
# -a Checks out master, fetch and ff, then prune merged and remotes
# @author Jude Aakjaer

prune_merged_branches ()
{
  branches=$(git branch --merged | grep -v "\*")

  if [ $? -ne 0 ]; then
    echo "No branches to cleanup"
    return
  fi

  echo $branches | xargs -n 1 git branch -d
}

prune_remotes ()
{
  git remote | xargs -n 1 git remote prune
}

rebase_against_origin_master ()
{
  git fetch origin

  local did_stash=$(stash_if_unstaged)

  git rebase origin/${MAIN_BRANCH}

  if [ $did_stash -ne 0 ]; then
    git stash pop --quiet
  fi
}

rebase_against_branched ()
{
  current_branch=$(git rev-parse --abbrev-ref HEAD)
  if [ $current_branch == $MAIN_BRANCH ]; then
    echo "Already on ${MAIN_BRANCH}"
    return
  fi
  local did_stash=$(stash_if_unstaged)

  git rebase -i $(git merge-base HEAD $MAIN_BRANCH)

  if [ $did_stash -ne 0 ]; then
    git stash pop --quiet
  fi
}

stash_if_unstaged ()
{
  git diff-index --quiet HEAD --
  local needs_stash=$?
  if [ $needs_stash -ne 0 ]; then
    git stash save -u --quiet
  fi
  echo $needs_stash
}

function has_main_branch ()
{
  git branch --list | grep main > /dev/null
  return $?
}

if has_main_branch ; then
  MAIN_BRANCH="main"
else
  MAIN_BRANCH="master"
fi

while getopts ":xbram" opt; do
  case $opt in
    x)
      rebase_against_origin_master
      ;;
    a)
      git checkout $MAIN_BRANCH
      git fetch
      git ff
      prune_merged_branches
      prune_remotes
      ;;
    m) prune_merged_branches
      ;;
    r) prune_remotes
      ;;
    b) rebase_against_branched
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
  esac
done

